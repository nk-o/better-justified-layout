{"version":3,"file":"better-justified-layout.esm.js","sources":["../src/row.js","../src/index.js"],"sourcesContent":["/**\n * Row\n * Wrapper for each row in a justified layout.\n * Stores relevant values and provides methods for calculating layout of individual rows.\n *\n * @param {Object} layoutConfig - The same as that passed\n * @param {Object} Initialization parameters. The following are all required:\n * @param params.top {Number} Top of row, relative to container\n * @param params.left {Number} Left side of row relative to container (equal to container left padding)\n * @param params.width {Number} Width of row, not including container padding\n * @param params.spacing {Number} Horizontal spacing between items\n * @param params.targetRowHeight {Number} Layout algorithm will aim for this row height\n * @param params.targetRowHeightTolerance {Number} Row heights may vary +/- (`targetRowHeight` x `targetRowHeightTolerance`)\n * @param params.edgeCaseMinRowHeight {Number} Absolute minimum row height for edge cases that cannot be resolved within tolerance.\n * @param params.edgeCaseMaxRowHeight {Number} Absolute maximum row height for edge cases that cannot be resolved within tolerance.\n * @param params.isBreakoutRow {Boolean} Is this row in particular one of those breakout rows? Always false if it's not that kind of photo list\n * @param params.widowLayoutStyle {String} If widows are visible, how should they be laid out?\n * @constructor\n */\nconst Row = function (params) {\n  // Top of row, relative to container\n  this.top = params.top;\n\n  // Left side of row relative to container (equal to container left padding)\n  this.left = params.left;\n\n  // Width of row, not including container padding\n  this.width = params.width;\n\n  // Horizontal spacing between items\n  this.spacing = params.spacing;\n\n  // Row height calculation values\n  this.targetRowHeight = params.targetRowHeight;\n  this.targetRowHeightTolerance = params.targetRowHeightTolerance;\n  this.minAspectRatio =\n    (this.width / params.targetRowHeight) *\n    (1 - params.targetRowHeightTolerance);\n  this.maxAspectRatio =\n    (this.width / params.targetRowHeight) *\n    (1 + params.targetRowHeightTolerance);\n\n  // Edge case row height minimum/maximum\n  this.edgeCaseMinRowHeight = params.edgeCaseMinRowHeight;\n  this.edgeCaseMaxRowHeight = params.edgeCaseMaxRowHeight;\n\n  // Widow layout direction\n  this.widowLayoutStyle = params.widowLayoutStyle;\n\n  // Full width breakout rows\n  this.isBreakoutRow = params.isBreakoutRow;\n\n  // Store layout data for each item in row\n  this.items = [];\n\n  // Height remains at 0 until it's been calculated\n  this.height = 0;\n};\n\nRow.prototype = {\n  /**\n   * Attempt to add a single item to the row.\n   * This is the heart of the justified algorithm.\n   * This method is direction-agnostic; it deals only with sizes, not positions.\n   *\n   * If the item fits in the row, without pushing row height beyond min/max tolerance,\n   * the item is added and the method returns true.\n   *\n   * If the item leaves row height too high, there may be room to scale it down and add another item.\n   * In this case, the item is added and the method returns true, but the row is incomplete.\n   *\n   * If the item leaves row height too short, there are too many items to fit within tolerance.\n   * The method will either accept or reject the new item, favoring the resulting row height closest to within tolerance.\n   * If the item is rejected, left/right padding will be required to fit the row height within tolerance;\n   * if the item is accepted, top/bottom cropping will be required to fit the row height within tolerance.\n   *\n   * @method addItem\n   * @param itemData {Object} Item layout data, containing item aspect ratio.\n   * @return {Boolean} True if successfully added; false if rejected.\n   */\n  addItem: function (itemData) {\n    const newItems = this.items.concat(itemData);\n    // Calculate aspect ratios for items only; exclude spacing\n    const rowWidthWithoutSpacing =\n      this.width - (newItems.length - 1) * this.spacing;\n    const newAspectRatio = newItems.reduce(function (sum, item) {\n      return sum + item.aspectRatio;\n    }, 0);\n    const targetAspectRatio = rowWidthWithoutSpacing / this.targetRowHeight;\n    let previousRowWidthWithoutSpacing;\n    let previousAspectRatio;\n    let previousTargetAspectRatio;\n\n    // Handle big full-width breakout photos if we're doing them\n    if (this.isBreakoutRow) {\n      // Only do it if there's no other items in this row\n      if (this.items.length === 0) {\n        // Only go full width if this photo is a square or landscape\n        if (itemData.aspectRatio >= 1) {\n          // Close out the row with a full width photo\n          this.items.push(itemData);\n          this.completeLayout(\n            rowWidthWithoutSpacing / itemData.aspectRatio,\n            \"justify\",\n          );\n          return true;\n        }\n      }\n    }\n\n    if (newAspectRatio < this.minAspectRatio) {\n      // New aspect ratio is too narrow / scaled row height is too tall.\n      // Accept this item and leave row open for more items.\n\n      this.items.push(Object.assign({}, itemData));\n      return true;\n    } else if (newAspectRatio > this.maxAspectRatio) {\n      // New aspect ratio is too wide / scaled row height will be too short.\n      // Accept item if the resulting aspect ratio is closer to target than it would be without the item.\n      // NOTE: Any row that falls into this block will require cropping/padding on individual items.\n\n      if (this.items.length === 0) {\n        // When there are no existing items, force acceptance of the new item and complete the layout.\n        // This is the pano special case.\n        this.items.push(Object.assign({}, itemData));\n        this.completeLayout(rowWidthWithoutSpacing / newAspectRatio, \"justify\");\n        return true;\n      }\n\n      // Calculate width/aspect ratio for row before adding new item\n      previousRowWidthWithoutSpacing =\n        this.width - (this.items.length - 1) * this.spacing;\n      previousAspectRatio = this.items.reduce(function (sum, item) {\n        return sum + item.aspectRatio;\n      }, 0);\n      previousTargetAspectRatio =\n        previousRowWidthWithoutSpacing / this.targetRowHeight;\n\n      if (\n        Math.abs(newAspectRatio - targetAspectRatio) >\n        Math.abs(previousAspectRatio - previousTargetAspectRatio)\n      ) {\n        // Row with new item is us farther away from target than row without; complete layout and reject item.\n        this.completeLayout(\n          previousRowWidthWithoutSpacing / previousAspectRatio,\n          \"justify\",\n        );\n        return false;\n      } else {\n        // Row with new item is us closer to target than row without;\n        // accept the new item and complete the row layout.\n        this.items.push(Object.assign({}, itemData));\n        this.completeLayout(rowWidthWithoutSpacing / newAspectRatio, \"justify\");\n        return true;\n      }\n    } else {\n      // New aspect ratio / scaled row height is within tolerance;\n      // accept the new item and complete the row layout.\n      this.items.push(Object.assign({}, itemData));\n      this.completeLayout(rowWidthWithoutSpacing / newAspectRatio, \"justify\");\n      return true;\n    }\n  },\n\n  /**\n   * Check if a row has completed its layout.\n   *\n   * @method isLayoutComplete\n   * @return {Boolean} True if complete; false if not.\n   */\n  isLayoutComplete: function () {\n    return this.height > 0;\n  },\n\n  /**\n   * Set row height and compute item geometry from that height.\n   * Will justify items within the row unless instructed not to.\n   *\n   * @method completeLayout\n   * @param newHeight {Number} Set row height to this value.\n   * @param widowLayoutStyle {String} How should widows display? Supported: left | justify | center\n   */\n  completeLayout: function (newHeight, widowLayoutStyle) {\n    let itemWidthSum = this.left;\n    const rowWidthWithoutSpacing =\n      this.width - (this.items.length - 1) * this.spacing;\n    let clampedToNativeRatio;\n    let clampedHeight;\n    let errorWidthPerItem;\n    let roundedCumulativeErrors;\n    let singleItemGeometry;\n    let centerOffset;\n\n    // Justify unless explicitly specified otherwise.\n    if (\n      typeof widowLayoutStyle === \"undefined\" ||\n      [\"justify\", \"center\", \"left\"].indexOf(widowLayoutStyle) < 0\n    ) {\n      widowLayoutStyle = \"left\";\n    }\n\n    // Clamp row height to edge case minimum/maximum.\n    clampedHeight = Math.max(\n      this.edgeCaseMinRowHeight,\n      Math.min(newHeight, this.edgeCaseMaxRowHeight),\n    );\n\n    if (newHeight !== clampedHeight) {\n      // If row height was clamped, the resulting row/item aspect ratio will be off,\n      // so force it to fit the width (recalculate aspectRatio to match clamped height).\n      // NOTE: this will result in cropping/padding commensurate to the amount of clamping.\n      this.height = clampedHeight;\n      clampedToNativeRatio =\n        rowWidthWithoutSpacing /\n        clampedHeight /\n        (rowWidthWithoutSpacing / newHeight);\n    } else {\n      // If not clamped, leave ratio at 1.0.\n      this.height = newHeight;\n      clampedToNativeRatio = 1.0;\n    }\n\n    // Compute item geometry based on newHeight.\n    this.items.forEach(function (item) {\n      item.top = this.top;\n      item.width = item.aspectRatio * this.height * clampedToNativeRatio;\n      item.height = this.height;\n\n      // Left-to-right.\n      // TODO right to left\n      // item.left = this.width - itemWidthSum - item.width;\n      item.left = itemWidthSum;\n\n      // Increment width.\n      itemWidthSum += item.width + this.spacing;\n    }, this);\n\n    // If specified, ensure items fill row and distribute error\n    // caused by rounding width and height across all items.\n    if (widowLayoutStyle === \"justify\") {\n      itemWidthSum -= this.spacing + this.left;\n\n      errorWidthPerItem = (itemWidthSum - this.width) / this.items.length;\n      roundedCumulativeErrors = this.items.map(function (item, i) {\n        return Math.round((i + 1) * errorWidthPerItem);\n      });\n\n      if (this.items.length === 1) {\n        // For rows with only one item, adjust item width to fill row.\n        singleItemGeometry = this.items[0];\n        singleItemGeometry.width -= Math.round(errorWidthPerItem);\n      } else {\n        // For rows with multiple items, adjust item width and shift items to fill the row,\n        // while maintaining equal spacing between items in the row.\n        this.items.forEach(function (item, i) {\n          if (i > 0) {\n            item.left -= roundedCumulativeErrors[i - 1];\n            item.width -=\n              roundedCumulativeErrors[i] - roundedCumulativeErrors[i - 1];\n          } else {\n            item.width -= roundedCumulativeErrors[i];\n          }\n        });\n      }\n    } else if (widowLayoutStyle === \"center\") {\n      // Center widows\n      centerOffset = (this.width - itemWidthSum) / 2;\n\n      this.items.forEach(function (item) {\n        item.left += centerOffset + this.spacing;\n      }, this);\n    }\n  },\n\n  /**\n   * Force completion of row layout with current items.\n   *\n   * @method forceComplete\n   * @param fitToWidth {Boolean} Stretch current items to fill the row width.\n   *                             This will likely result in padding.\n   * @param fitToWidth {Number}\n   */\n  forceComplete: function (fitToWidth, rowHeight) {\n    // TODO Handle fitting to width\n    // var rowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing,\n    // \tcurrentAspectRatio = this.items.reduce(function (sum, item) {\n    // \t\treturn sum + item.aspectRatio;\n    // \t}, 0);\n\n    if (typeof rowHeight === \"number\") {\n      this.completeLayout(rowHeight, this.widowLayoutStyle);\n    } else {\n      // Complete using target row height.\n      this.completeLayout(this.targetRowHeight, this.widowLayoutStyle);\n    }\n  },\n\n  /**\n   * Return layout data for items within row.\n   * Note: returns actual list, not a copy.\n   *\n   * @method getItems\n   * @return Layout data for items within row.\n   */\n  getItems: function () {\n    return this.items;\n  },\n};\n\nexport default Row;\n","/*!\n * Copyright 2019 SmugMug, Inc. | Copyright 2024 nK\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n * @license\n */\nimport Row from \"./row\";\n\n/**\n * Create a new, empty row.\n *\n * @method createNewRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @return A new, empty row of the type specified by this layout.\n */\nfunction createNewRow(layoutConfig, layoutData) {\n  let isBreakoutRow;\n\n  // Work out if this is a full width breakout row\n  if (layoutConfig.fullWidthBreakoutRowCadence !== false) {\n    if (\n      (layoutData._rows.length + 1) %\n        layoutConfig.fullWidthBreakoutRowCadence ===\n      0\n    ) {\n      isBreakoutRow = true;\n    }\n  }\n\n  return new Row({\n    top: layoutData._containerHeight,\n    left: layoutConfig.containerPadding.left,\n    width:\n      layoutConfig.containerWidth -\n      layoutConfig.containerPadding.left -\n      layoutConfig.containerPadding.right,\n    spacing: layoutConfig.boxSpacing.horizontal,\n    targetRowHeight: layoutConfig.targetRowHeight,\n    targetRowHeightTolerance: layoutConfig.targetRowHeightTolerance,\n    edgeCaseMinRowHeight: 0.5 * layoutConfig.targetRowHeight,\n    edgeCaseMaxRowHeight: 2 * layoutConfig.targetRowHeight,\n    rightToLeft: false,\n    isBreakoutRow: isBreakoutRow,\n    widowLayoutStyle: layoutConfig.widowLayoutStyle,\n  });\n}\n\n/**\n * Add a completed row to the layout.\n * Note: the row must have already been completed.\n *\n * @method addRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param row {Row} The row to add.\n * @return {Array} Each item added to the row.\n */\nfunction addRow(layoutConfig, layoutData, row) {\n  layoutData._rows.push(row);\n  layoutData._layoutItems = layoutData._layoutItems.concat(row.getItems());\n\n  // Increment the container height\n  layoutData._containerHeight += row.height + layoutConfig.boxSpacing.vertical;\n\n  return row.items;\n}\n\n/**\n * Calculate the current layout for all items in the list that require layout.\n * \"Layout\" means geometry: position within container and size\n *\n * @method computeLayout\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param itemLayoutData {Array} Array of items to lay out, with data required to lay out each item\n * @return {Object} The newly-calculated layout, containing the new container height, and lists of layout items\n */\nfunction computeLayout(layoutConfig, layoutData, itemLayoutData) {\n  let laidOutItems = [];\n  let itemAdded;\n  let currentRow;\n  let nextToLastRowHeight;\n\n  // Apply forced aspect ratio if specified, and set a flag.\n  if (layoutConfig.forceAspectRatio) {\n    itemLayoutData.forEach(function (itemData) {\n      itemData.forcedAspectRatio = true;\n      itemData.aspectRatio = layoutConfig.forceAspectRatio;\n    });\n  }\n\n  // Loop through the items\n  itemLayoutData.some(function (itemData, i) {\n    if (isNaN(itemData.aspectRatio)) {\n      throw new Error(\"Item \" + i + \" has an invalid aspect ratio\");\n    }\n\n    // If not currently building up a row, make a new one.\n    if (!currentRow) {\n      currentRow = createNewRow(layoutConfig, layoutData);\n    }\n\n    // Attempt to add item to the current row.\n    itemAdded = currentRow.addItem(itemData);\n\n    if (currentRow.isLayoutComplete()) {\n      // Row is filled; add it and start a new one\n      laidOutItems = laidOutItems.concat(\n        addRow(layoutConfig, layoutData, currentRow),\n      );\n\n      if (layoutData._rows.length >= layoutConfig.maxNumRows) {\n        currentRow = null;\n        return true;\n      }\n\n      currentRow = createNewRow(layoutConfig, layoutData);\n\n      // Item was rejected; add it to its own row\n      if (!itemAdded) {\n        itemAdded = currentRow.addItem(itemData);\n\n        if (currentRow.isLayoutComplete()) {\n          // If the rejected item fills a row on its own, add the row and start another new one\n          laidOutItems = laidOutItems.concat(\n            addRow(layoutConfig, layoutData, currentRow),\n          );\n          if (layoutData._rows.length >= layoutConfig.maxNumRows) {\n            currentRow = null;\n            return true;\n          }\n          currentRow = createNewRow(layoutConfig, layoutData);\n        }\n      }\n    }\n  });\n\n  // Handle any leftover content (orphans) depending on where they lie\n  // in this layout update, and in the total content set.\n  if (currentRow && currentRow.getItems().length && layoutConfig.showWidows) {\n    // Last page of all content or orphan suppression is suppressed; lay out orphans.\n    if (layoutData._rows.length) {\n      // Only Match previous row's height if it exists and it isn't a breakout row\n      if (layoutData._rows[layoutData._rows.length - 1].isBreakoutRow) {\n        nextToLastRowHeight =\n          layoutData._rows[layoutData._rows.length - 1].targetRowHeight;\n      } else {\n        nextToLastRowHeight =\n          layoutData._rows[layoutData._rows.length - 1].height;\n      }\n\n      currentRow.forceComplete(false, nextToLastRowHeight);\n    } else {\n      // ...else use target height if there is no other row height to reference.\n      currentRow.forceComplete(false);\n    }\n\n    laidOutItems = laidOutItems.concat(\n      addRow(layoutConfig, layoutData, currentRow),\n    );\n    layoutConfig._widowCount = currentRow.getItems().length;\n  }\n\n  // We need to clean up the bottom container padding\n  // First remove the height added for box spacing\n  layoutData._containerHeight =\n    layoutData._containerHeight - layoutConfig.boxSpacing.vertical;\n  // Then add our bottom container padding\n  layoutData._containerHeight =\n    layoutData._containerHeight + layoutConfig.containerPadding.bottom;\n\n  return {\n    containerHeight: layoutData._containerHeight,\n    widowCount: layoutConfig._widowCount,\n    boxes: layoutData._layoutItems,\n  };\n}\n\n/**\n * Takes in a bunch of box data and config. Returns\n * geometry to lay them out in a justified view.\n *\n * @method covertSizesToAspectRatios\n * @param sizes {Array} Array of objects with widths and heights\n * @return {Array} A list of aspect ratios\n */\nexport default function (input, config) {\n  let layoutConfig = {};\n  const layoutData = {};\n\n  // Defaults\n  const defaults = {\n    containerWidth: 1060,\n    containerPadding: 10,\n    boxSpacing: 10,\n    targetRowHeight: 320,\n    targetRowHeightTolerance: 0.25,\n    maxNumRows: Number.POSITIVE_INFINITY,\n    forceAspectRatio: false,\n    showWidows: true,\n    fullWidthBreakoutRowCadence: false,\n    widowLayoutStyle: \"left\",\n  };\n\n  const containerPadding = {};\n  const boxSpacing = {};\n\n  config = config || {};\n\n  // Merge defaults and config passed in\n  layoutConfig = Object.assign(defaults, config);\n\n  // Sort out padding and spacing values\n  containerPadding.top = !isNaN(parseFloat(layoutConfig.containerPadding.top))\n    ? layoutConfig.containerPadding.top\n    : layoutConfig.containerPadding;\n  containerPadding.right = !isNaN(\n    parseFloat(layoutConfig.containerPadding.right),\n  )\n    ? layoutConfig.containerPadding.right\n    : layoutConfig.containerPadding;\n  containerPadding.bottom = !isNaN(\n    parseFloat(layoutConfig.containerPadding.bottom),\n  )\n    ? layoutConfig.containerPadding.bottom\n    : layoutConfig.containerPadding;\n  containerPadding.left = !isNaN(parseFloat(layoutConfig.containerPadding.left))\n    ? layoutConfig.containerPadding.left\n    : layoutConfig.containerPadding;\n  boxSpacing.horizontal = !isNaN(parseFloat(layoutConfig.boxSpacing.horizontal))\n    ? layoutConfig.boxSpacing.horizontal\n    : layoutConfig.boxSpacing;\n  boxSpacing.vertical = !isNaN(parseFloat(layoutConfig.boxSpacing.vertical))\n    ? layoutConfig.boxSpacing.vertical\n    : layoutConfig.boxSpacing;\n\n  layoutConfig.containerPadding = containerPadding;\n  layoutConfig.boxSpacing = boxSpacing;\n\n  // Local\n  layoutData._layoutItems = [];\n  layoutData._awakeItems = [];\n  layoutData._inViewportItems = [];\n  layoutData._leadingOrphans = [];\n  layoutData._trailingOrphans = [];\n  layoutData._containerHeight = layoutConfig.containerPadding.top;\n  layoutData._rows = [];\n  layoutData._orphans = [];\n  layoutConfig._widowCount = 0;\n\n  // Convert widths and heights to aspect ratios if we need to\n  return computeLayout(\n    layoutConfig,\n    layoutData,\n    input.map(function (item) {\n      if (item.width && item.height) {\n        return { aspectRatio: item.width / item.height };\n      } else {\n        return { aspectRatio: item };\n      }\n    }),\n  );\n}\n"],"names":["Row","params","top","left","width","spacing","targetRowHeight","targetRowHeightTolerance","minAspectRatio","maxAspectRatio","edgeCaseMinRowHeight","edgeCaseMaxRowHeight","widowLayoutStyle","isBreakoutRow","items","height","prototype","addItem","itemData","newItems","concat","rowWidthWithoutSpacing","length","newAspectRatio","reduce","sum","item","aspectRatio","targetAspectRatio","previousRowWidthWithoutSpacing","previousAspectRatio","previousTargetAspectRatio","push","completeLayout","Object","assign","Math","abs","isLayoutComplete","newHeight","itemWidthSum","clampedToNativeRatio","clampedHeight","errorWidthPerItem","roundedCumulativeErrors","singleItemGeometry","centerOffset","indexOf","max","min","forEach","map","i","round","forceComplete","fitToWidth","rowHeight","getItems","createNewRow","layoutConfig","layoutData","fullWidthBreakoutRowCadence","_rows","_containerHeight","containerPadding","containerWidth","right","boxSpacing","horizontal","rightToLeft","addRow","row","_layoutItems","vertical","computeLayout","itemLayoutData","laidOutItems","itemAdded","currentRow","nextToLastRowHeight","forceAspectRatio","forcedAspectRatio","some","isNaN","Error","maxNumRows","showWidows","_widowCount","bottom","containerHeight","widowCount","boxes","input","config","defaults","Number","POSITIVE_INFINITY","parseFloat","_awakeItems","_inViewportItems","_leadingOrphans","_trailingOrphans","_orphans"],"mappings":"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"}