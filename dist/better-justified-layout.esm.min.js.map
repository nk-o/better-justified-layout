{"version":3,"file":"better-justified-layout.esm.min.js","sources":["../src/row.js","../src/index.js"],"sourcesContent":["/**\n * Row\n * Wrapper for each row in a justified layout.\n * Stores relevant values and provides methods for calculating layout of individual rows.\n *\n * @param {Object} layoutConfig - The same as that passed\n * @param {Object} Initialization parameters. The following are all required:\n * @param params.index {Number} The index of this row\n * @param params.top {Number} Top of row, relative to container\n * @param params.left {Number} Left side of row relative to container (equal to container left padding)\n * @param params.width {Number} Width of row, not including container padding\n * @param params.spacing {Number} Horizontal spacing between items\n * @param params.targetRowHeight {Number} Layout algorithm will aim for this row height\n * @param params.targetRowHeightTolerance {Number} Row heights may vary +/- (`targetRowHeight` x `targetRowHeightTolerance`)\n * @param params.edgeCaseMinRowHeight {Number} Absolute minimum row height for edge cases that cannot be resolved within tolerance.\n * @param params.edgeCaseMaxRowHeight {Number} Absolute maximum row height for edge cases that cannot be resolved within tolerance.\n * @param params.isBreakoutRow {Boolean} Is this row in particular one of those breakout rows? Always false if it's not that kind of photo list\n * @param params.widowLayoutStyle {String} If widows are visible, how should they be laid out?\n * @constructor\n */\nconst Row = function (params) {\n  // The index of this row\n  this.index = params.index;\n\n  // Top of row, relative to container\n  this.top = params.top;\n\n  // Left side of row relative to container (equal to container left padding)\n  this.left = params.left;\n\n  // Width of row, not including container padding\n  this.width = params.width;\n\n  // Horizontal spacing between items\n  this.spacing = params.spacing;\n\n  // Row height calculation values\n  this.targetRowHeight = params.targetRowHeight;\n  this.targetRowHeightTolerance = params.targetRowHeightTolerance;\n  this.minAspectRatio =\n    (this.width / params.targetRowHeight) *\n    (1 - params.targetRowHeightTolerance);\n  this.maxAspectRatio =\n    (this.width / params.targetRowHeight) *\n    (1 + params.targetRowHeightTolerance);\n\n  // Edge case row height minimum/maximum\n  this.edgeCaseMinRowHeight = params.edgeCaseMinRowHeight;\n  this.edgeCaseMaxRowHeight = params.edgeCaseMaxRowHeight;\n\n  // Widow layout direction\n  this.widowLayoutStyle = params.widowLayoutStyle;\n\n  // Full width breakout rows\n  this.isBreakoutRow = params.isBreakoutRow;\n\n  // Store layout data for each item in row\n  this.items = [];\n\n  // Height remains at 0 until it's been calculated\n  this.height = 0;\n};\n\nRow.prototype = {\n  /**\n   * Attempt to add a single item to the row.\n   * This is the heart of the justified algorithm.\n   * This method is direction-agnostic; it deals only with sizes, not positions.\n   *\n   * If the item fits in the row, without pushing row height beyond min/max tolerance,\n   * the item is added and the method returns true.\n   *\n   * If the item leaves row height too high, there may be room to scale it down and add another item.\n   * In this case, the item is added and the method returns true, but the row is incomplete.\n   *\n   * If the item leaves row height too short, there are too many items to fit within tolerance.\n   * The method will either accept or reject the new item, favoring the resulting row height closest to within tolerance.\n   * If the item is rejected, left/right padding will be required to fit the row height within tolerance;\n   * if the item is accepted, top/bottom cropping will be required to fit the row height within tolerance.\n   *\n   * @method addItem\n   * @param itemData {Object} Item layout data, containing item aspect ratio.\n   * @return {Boolean} True if successfully added; false if rejected.\n   */\n  addItem: function (itemData) {\n    const newItems = this.items.concat(itemData);\n    // Calculate aspect ratios for items only; exclude spacing\n    const rowWidthWithoutSpacing =\n      this.width - (newItems.length - 1) * this.spacing;\n    const newAspectRatio = newItems.reduce(function (sum, item) {\n      return sum + item.aspectRatio;\n    }, 0);\n    const targetAspectRatio = rowWidthWithoutSpacing / this.targetRowHeight;\n    let previousRowWidthWithoutSpacing;\n    let previousAspectRatio;\n    let previousTargetAspectRatio;\n\n    // Handle big full-width breakout photos if we're doing them\n    if (this.isBreakoutRow) {\n      // Only do it if there's no other items in this row\n      if (this.items.length === 0) {\n        // Only go full width if this photo is a square or landscape\n        if (itemData.aspectRatio >= 1) {\n          // Close out the row with a full width photo\n          this.items.push(itemData);\n          this.completeLayout(\n            rowWidthWithoutSpacing / itemData.aspectRatio,\n            \"justify\",\n          );\n          return true;\n        }\n      }\n    }\n\n    if (newAspectRatio < this.minAspectRatio) {\n      // New aspect ratio is too narrow / scaled row height is too tall.\n      // Accept this item and leave row open for more items.\n\n      this.items.push(Object.assign({}, itemData));\n      return true;\n    } else if (newAspectRatio > this.maxAspectRatio) {\n      // New aspect ratio is too wide / scaled row height will be too short.\n      // Accept item if the resulting aspect ratio is closer to target than it would be without the item.\n      // NOTE: Any row that falls into this block will require cropping/padding on individual items.\n\n      if (this.items.length === 0) {\n        // When there are no existing items, force acceptance of the new item and complete the layout.\n        // This is the pano special case.\n        this.items.push(Object.assign({}, itemData));\n        this.completeLayout(rowWidthWithoutSpacing / newAspectRatio, \"justify\");\n        return true;\n      }\n\n      // Calculate width/aspect ratio for row before adding new item\n      previousRowWidthWithoutSpacing =\n        this.width - (this.items.length - 1) * this.spacing;\n      previousAspectRatio = this.items.reduce(function (sum, item) {\n        return sum + item.aspectRatio;\n      }, 0);\n      previousTargetAspectRatio =\n        previousRowWidthWithoutSpacing / this.targetRowHeight;\n\n      if (\n        Math.abs(newAspectRatio - targetAspectRatio) >\n        Math.abs(previousAspectRatio - previousTargetAspectRatio)\n      ) {\n        // Row with new item is us farther away from target than row without; complete layout and reject item.\n        this.completeLayout(\n          previousRowWidthWithoutSpacing / previousAspectRatio,\n          \"justify\",\n        );\n        return false;\n      } else {\n        // Row with new item is us closer to target than row without;\n        // accept the new item and complete the row layout.\n        this.items.push(Object.assign({}, itemData));\n        this.completeLayout(rowWidthWithoutSpacing / newAspectRatio, \"justify\");\n        return true;\n      }\n    } else {\n      // New aspect ratio / scaled row height is within tolerance;\n      // accept the new item and complete the row layout.\n      this.items.push(Object.assign({}, itemData));\n      this.completeLayout(rowWidthWithoutSpacing / newAspectRatio, \"justify\");\n      return true;\n    }\n  },\n\n  /**\n   * Check if a row has completed its layout.\n   *\n   * @method isLayoutComplete\n   * @return {Boolean} True if complete; false if not.\n   */\n  isLayoutComplete: function () {\n    return this.height > 0;\n  },\n\n  /**\n   * Set row height and compute item geometry from that height.\n   * Will justify items within the row unless instructed not to.\n   *\n   * @method completeLayout\n   * @param newHeight {Number} Set row height to this value.\n   * @param widowLayoutStyle {String} How should widows display? Supported: left | justify | center\n   */\n  completeLayout: function (newHeight, widowLayoutStyle) {\n    let itemWidthSum = this.left;\n    const rowWidthWithoutSpacing =\n      this.width - (this.items.length - 1) * this.spacing;\n    let clampedToNativeRatio;\n    let clampedHeight;\n    let errorWidthPerItem;\n    let roundedCumulativeErrors;\n    let singleItemGeometry;\n    let centerOffset;\n\n    // Justify unless explicitly specified otherwise.\n    if (\n      typeof widowLayoutStyle === \"undefined\" ||\n      [\"justify\", \"center\", \"left\"].indexOf(widowLayoutStyle) < 0\n    ) {\n      widowLayoutStyle = \"left\";\n    }\n\n    // Clamp row height to edge case minimum/maximum.\n    clampedHeight = Math.max(\n      this.edgeCaseMinRowHeight,\n      Math.min(newHeight, this.edgeCaseMaxRowHeight),\n    );\n\n    if (newHeight !== clampedHeight) {\n      // If row height was clamped, the resulting row/item aspect ratio will be off,\n      // so force it to fit the width (recalculate aspectRatio to match clamped height).\n      // NOTE: this will result in cropping/padding commensurate to the amount of clamping.\n      this.height = clampedHeight;\n      clampedToNativeRatio =\n        rowWidthWithoutSpacing /\n        clampedHeight /\n        (rowWidthWithoutSpacing / newHeight);\n    } else {\n      // If not clamped, leave ratio at 1.0.\n      this.height = newHeight;\n      clampedToNativeRatio = 1.0;\n    }\n\n    // Compute item geometry based on newHeight.\n    this.items.forEach(function (item) {\n      item.row = this.index;\n      item.top = this.top;\n      item.width = item.aspectRatio * this.height * clampedToNativeRatio;\n      item.height = this.height;\n\n      // Left-to-right.\n      // TODO right to left\n      // item.left = this.width - itemWidthSum - item.width;\n      item.left = itemWidthSum;\n\n      // Increment width.\n      itemWidthSum += item.width + this.spacing;\n    }, this);\n\n    // If specified, ensure items fill row and distribute error\n    // caused by rounding width and height across all items.\n    if (widowLayoutStyle === \"justify\") {\n      itemWidthSum -= this.spacing + this.left;\n\n      errorWidthPerItem = (itemWidthSum - this.width) / this.items.length;\n      roundedCumulativeErrors = this.items.map(function (item, i) {\n        return Math.round((i + 1) * errorWidthPerItem);\n      });\n\n      if (this.items.length === 1) {\n        // For rows with only one item, adjust item width to fill row.\n        singleItemGeometry = this.items[0];\n        singleItemGeometry.width -= Math.round(errorWidthPerItem);\n      } else {\n        // For rows with multiple items, adjust item width and shift items to fill the row,\n        // while maintaining equal spacing between items in the row.\n        this.items.forEach(function (item, i) {\n          if (i > 0) {\n            item.left -= roundedCumulativeErrors[i - 1];\n            item.width -=\n              roundedCumulativeErrors[i] - roundedCumulativeErrors[i - 1];\n          } else {\n            item.width -= roundedCumulativeErrors[i];\n          }\n        });\n      }\n    } else if (widowLayoutStyle === \"center\") {\n      // Center widows\n      centerOffset = (this.width - itemWidthSum) / 2;\n\n      this.items.forEach(function (item) {\n        item.left += centerOffset + this.spacing;\n      }, this);\n    }\n  },\n\n  /**\n   * Force completion of row layout with current items.\n   *\n   * @method forceComplete\n   * @param fitToWidth {Boolean} Stretch current items to fill the row width.\n   *                             This will likely result in padding.\n   * @param fitToWidth {Number}\n   */\n  forceComplete: function (fitToWidth, rowHeight) {\n    // TODO Handle fitting to width\n    // var rowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing,\n    // \tcurrentAspectRatio = this.items.reduce(function (sum, item) {\n    // \t\treturn sum + item.aspectRatio;\n    // \t}, 0);\n\n    if (typeof rowHeight === \"number\") {\n      this.completeLayout(rowHeight, this.widowLayoutStyle);\n    } else {\n      // Complete using target row height.\n      this.completeLayout(this.targetRowHeight, this.widowLayoutStyle);\n    }\n  },\n\n  /**\n   * Return layout data for items within row.\n   * Note: returns actual list, not a copy.\n   *\n   * @method getItems\n   * @return Layout data for items within row.\n   */\n  getItems: function () {\n    return this.items;\n  },\n};\n\nexport default Row;\n","/*!\n * Copyright 2019 SmugMug, Inc. | Copyright 2024 nK\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n * @license\n */\nimport Row from \"./row\";\n\n/**\n * Create a new, empty row.\n *\n * @method createNewRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @return A new, empty row of the type specified by this layout.\n */\nfunction createNewRow(layoutConfig, layoutData) {\n  let isBreakoutRow;\n\n  // Work out if this is a full width breakout row\n  if (layoutConfig.fullWidthBreakoutRowCadence !== false) {\n    if (\n      (layoutData._rows.length + 1) %\n        layoutConfig.fullWidthBreakoutRowCadence ===\n      0\n    ) {\n      isBreakoutRow = true;\n    }\n  }\n\n  return new Row({\n    index: layoutData._rows.length,\n    top: layoutData._containerHeight,\n    left: layoutConfig.containerPadding.left,\n    width:\n      layoutConfig.containerWidth -\n      layoutConfig.containerPadding.left -\n      layoutConfig.containerPadding.right,\n    spacing: layoutConfig.boxSpacing.horizontal,\n    targetRowHeight: layoutConfig.targetRowHeight,\n    targetRowHeightTolerance: layoutConfig.targetRowHeightTolerance,\n    edgeCaseMinRowHeight:\n      layoutConfig.edgeCaseMinRowHeight * layoutConfig.targetRowHeight,\n    edgeCaseMaxRowHeight:\n      layoutConfig.edgeCaseMaxRowHeight * layoutConfig.targetRowHeight,\n    rightToLeft: false,\n    isBreakoutRow: isBreakoutRow,\n    widowLayoutStyle: layoutConfig.widowLayoutStyle,\n  });\n}\n\n/**\n * Add a completed row to the layout.\n * Note: the row must have already been completed.\n *\n * @method addRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param row {Row} The row to add.\n * @return {Array} Each item added to the row.\n */\nfunction addRow(layoutConfig, layoutData, row) {\n  layoutData._rows.push(row);\n  layoutData._layoutItems = layoutData._layoutItems.concat(row.getItems());\n\n  // Increment the container height\n  layoutData._containerHeight += row.height + layoutConfig.boxSpacing.vertical;\n\n  return row.items;\n}\n\n/**\n * Calculate the current layout for all items in the list that require layout.\n * \"Layout\" means geometry: position within container and size\n *\n * @method computeLayout\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param itemLayoutData {Array} Array of items to lay out, with data required to lay out each item\n * @return {Object} The newly-calculated layout, containing the new container height, and lists of layout items\n */\nfunction computeLayout(layoutConfig, layoutData, itemLayoutData) {\n  let laidOutItems = [];\n  let itemAdded;\n  let currentRow;\n  let nextToLastRowHeight;\n\n  // Apply forced aspect ratio if specified, and set a flag.\n  if (layoutConfig.forceAspectRatio) {\n    itemLayoutData.forEach(function (itemData) {\n      itemData.forcedAspectRatio = true;\n      itemData.aspectRatio = layoutConfig.forceAspectRatio;\n    });\n  }\n\n  // Loop through the items\n  itemLayoutData.some(function (itemData, i) {\n    if (isNaN(itemData.aspectRatio)) {\n      throw new Error(\"Item \" + i + \" has an invalid aspect ratio\");\n    }\n\n    // If not currently building up a row, make a new one.\n    if (!currentRow) {\n      currentRow = createNewRow(layoutConfig, layoutData);\n    }\n\n    // Attempt to add item to the current row.\n    itemAdded = currentRow.addItem(itemData);\n\n    if (currentRow.isLayoutComplete()) {\n      // Row is filled; add it and start a new one\n      laidOutItems = laidOutItems.concat(\n        addRow(layoutConfig, layoutData, currentRow),\n      );\n\n      if (layoutData._rows.length >= layoutConfig.maxNumRows) {\n        currentRow = null;\n        return true;\n      }\n\n      currentRow = createNewRow(layoutConfig, layoutData);\n\n      // Item was rejected; add it to its own row\n      if (!itemAdded) {\n        itemAdded = currentRow.addItem(itemData);\n\n        if (currentRow.isLayoutComplete()) {\n          // If the rejected item fills a row on its own, add the row and start another new one\n          laidOutItems = laidOutItems.concat(\n            addRow(layoutConfig, layoutData, currentRow),\n          );\n          if (layoutData._rows.length >= layoutConfig.maxNumRows) {\n            currentRow = null;\n            return true;\n          }\n          currentRow = createNewRow(layoutConfig, layoutData);\n        }\n      }\n    }\n  });\n\n  // Handle any leftover content (orphans) depending on where they lie\n  // in this layout update, and in the total content set.\n  if (currentRow && currentRow.getItems().length && layoutConfig.showWidows) {\n    // Last page of all content or orphan suppression is suppressed; lay out orphans.\n    if (layoutData._rows.length) {\n      // Only Match previous row's height if it exists and it isn't a breakout row\n      if (layoutData._rows[layoutData._rows.length - 1].isBreakoutRow) {\n        nextToLastRowHeight =\n          layoutData._rows[layoutData._rows.length - 1].targetRowHeight;\n      } else {\n        nextToLastRowHeight =\n          layoutData._rows[layoutData._rows.length - 1].height;\n      }\n\n      currentRow.forceComplete(false, nextToLastRowHeight);\n    } else {\n      // ...else use target height if there is no other row height to reference.\n      currentRow.forceComplete(false);\n    }\n\n    laidOutItems = laidOutItems.concat(\n      addRow(layoutConfig, layoutData, currentRow),\n    );\n    layoutConfig._widowCount = currentRow.getItems().length;\n  }\n\n  // We need to clean up the bottom container padding\n  // First remove the height added for box spacing\n  layoutData._containerHeight =\n    layoutData._containerHeight - layoutConfig.boxSpacing.vertical;\n  // Then add our bottom container padding\n  layoutData._containerHeight =\n    layoutData._containerHeight + layoutConfig.containerPadding.bottom;\n\n  return {\n    containerHeight: layoutData._containerHeight,\n    widowCount: layoutConfig._widowCount,\n    boxes: layoutData._layoutItems,\n  };\n}\n\n/**\n * Takes in a bunch of box data and config. Returns\n * geometry to lay them out in a justified view.\n *\n * @method covertSizesToAspectRatios\n * @param sizes {Array} Array of objects with widths and heights\n * @return {Array} A list of aspect ratios\n */\nexport default function (input, config) {\n  let layoutConfig = {};\n  const layoutData = {};\n\n  // Defaults\n  const defaults = {\n    containerWidth: 1060,\n    containerPadding: 10,\n    boxSpacing: 10,\n    targetRowHeight: 320,\n    targetRowHeightTolerance: 0.25,\n    edgeCaseMinRowHeight: 0.5,\n    edgeCaseMaxRowHeight: 2.5,\n    maxNumRows: Number.POSITIVE_INFINITY,\n    forceAspectRatio: false,\n    showWidows: true,\n    fullWidthBreakoutRowCadence: false,\n    widowLayoutStyle: \"left\",\n  };\n\n  const containerPadding = {};\n  const boxSpacing = {};\n\n  config = config || {};\n\n  // Merge defaults and config passed in\n  layoutConfig = Object.assign(defaults, config);\n\n  // Sort out padding and spacing values\n  containerPadding.top = !isNaN(parseFloat(layoutConfig.containerPadding.top))\n    ? layoutConfig.containerPadding.top\n    : layoutConfig.containerPadding;\n  containerPadding.right = !isNaN(\n    parseFloat(layoutConfig.containerPadding.right),\n  )\n    ? layoutConfig.containerPadding.right\n    : layoutConfig.containerPadding;\n  containerPadding.bottom = !isNaN(\n    parseFloat(layoutConfig.containerPadding.bottom),\n  )\n    ? layoutConfig.containerPadding.bottom\n    : layoutConfig.containerPadding;\n  containerPadding.left = !isNaN(parseFloat(layoutConfig.containerPadding.left))\n    ? layoutConfig.containerPadding.left\n    : layoutConfig.containerPadding;\n  boxSpacing.horizontal = !isNaN(parseFloat(layoutConfig.boxSpacing.horizontal))\n    ? layoutConfig.boxSpacing.horizontal\n    : layoutConfig.boxSpacing;\n  boxSpacing.vertical = !isNaN(parseFloat(layoutConfig.boxSpacing.vertical))\n    ? layoutConfig.boxSpacing.vertical\n    : layoutConfig.boxSpacing;\n\n  layoutConfig.containerPadding = containerPadding;\n  layoutConfig.boxSpacing = boxSpacing;\n\n  // Local\n  layoutData._layoutItems = [];\n  layoutData._awakeItems = [];\n  layoutData._inViewportItems = [];\n  layoutData._leadingOrphans = [];\n  layoutData._trailingOrphans = [];\n  layoutData._containerHeight = layoutConfig.containerPadding.top;\n  layoutData._rows = [];\n  layoutData._orphans = [];\n  layoutConfig._widowCount = 0;\n\n  // Convert widths and heights to aspect ratios if we need to\n  return computeLayout(\n    layoutConfig,\n    layoutData,\n    input.map(function (item) {\n      if (item.width && item.height) {\n        return { aspectRatio: item.width / item.height };\n      } else {\n        return { aspectRatio: item };\n      }\n    }),\n  );\n}\n"],"names":["Row","params","this","index","top","left","width","spacing","targetRowHeight","targetRowHeightTolerance","minAspectRatio","maxAspectRatio","edgeCaseMinRowHeight","edgeCaseMaxRowHeight","widowLayoutStyle","isBreakoutRow","items","height","createNewRow","layoutConfig","layoutData","fullWidthBreakoutRowCadence","_rows","length","_containerHeight","containerPadding","containerWidth","right","boxSpacing","horizontal","rightToLeft","addRow","row","push","_layoutItems","concat","getItems","vertical","input","config","defaults","maxNumRows","Number","POSITIVE_INFINITY","forceAspectRatio","showWidows","Object","assign","isNaN","parseFloat","bottom","_awakeItems","_inViewportItems","_leadingOrphans","_trailingOrphans","_orphans","_widowCount","itemLayoutData","itemAdded","currentRow","nextToLastRowHeight","laidOutItems","forEach","itemData","forcedAspectRatio","aspectRatio","some","i","Error","addItem","isLayoutComplete","forceComplete","containerHeight","widowCount","boxes","computeLayout","map","item","prototype","newItems","rowWidthWithoutSpacing","newAspectRatio","reduce","sum","targetAspectRatio","previousRowWidthWithoutSpacing","previousAspectRatio","previousTargetAspectRatio","completeLayout","Math","abs","newHeight","itemWidthSum","clampedToNativeRatio","clampedHeight","errorWidthPerItem","roundedCumulativeErrors","singleItemGeometry","centerOffset","indexOf","max","min","round","fitToWidth","rowHeight"],"mappings":"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"}